package Questions_Linked_list;
import java.util.*;
public class Advanced_binary_search_aggressive_cows {

//	public static void main(String[] args) {
//		Scanner sc=new Scanner(System.in);
//		int t=sc.nextInt();
//		while(t-- >0) {
//			int nos=sc.nextInt();			//no. of stalls
//			
//			int noc=sc.nextInt();			//no. of cow
//			int[] stall=new int[nos];
//			for(int i=0;i<stall.length;i++) {
//				stall[i]=sc.nextInt();
//			}
//			Arrays.sort(stall);
//			System.out.println(MaxDistance(stall,noc));
//		}
//		
//	}
//
//	private static int MaxDistance(int[] stall, int noc) {
//		
//		int lo=0;
//		int hi=stall[stall.length-1]-stall[0];//9-1
//		int ans=0;
//		while(lo<=hi) {
//			int mid=(lo+hi)/2;
//			if(isitpossible(stall,noc,mid)) {
//				ans=mid;
//				lo=mid+1;
//			}
//			else {
//				hi=mid-1;
//			}
//		}
//		return ans;
//	}
//
//	private static boolean isitpossible(int[] stall, int noc, int mid) {
//		
//		int pos=stall[0];
//		int c=1;  // one cow is placed in stall
//		for (int i = 1; i < stall.length; i++) {
//			if(stall[i]-pos>=mid) {
//				c++;
//				pos=stall[i];
//			}
//			if(c==noc) {
//				return true;
//			}
//		}
//		return false;
//	}
	public static void main(String args[]) {
		Scanner sc=new Scanner(System.in);
		int nos=sc.nextInt();
		int noc=sc.nextInt();
		int[] stalls=new int[nos];
		for(int i=0;i<stalls.length;i++){
			stalls[i]=sc.nextInt();
		}
		System.out.println(Maximum(stalls,noc));
    }
	public static int Maximum(int[] stalls,int noc){
		int lo=0;
		int hi=stalls[stalls.length-1]-stalls[0];
		int ans=0;
		while(lo<=hi){
			int mid=(lo+hi)/2;
			if(ispossible(stalls,noc,mid)){
				ans=mid;
				lo=mid+1;
			}
			else{
				hi=mid-1;
			}
		}
		return ans;
	}
	public static boolean ispossible(int[] stalls,int noc,int mid){
		int pos=stalls[0];
		int c=1;
		for(int i=1;i<stalls.length;i++){
			if(stalls[i]-pos>=mid){
				c++;
				pos=stalls[i];
			}
			if(c==noc){
				return true;
			}
		}
		return false;
	}
}
